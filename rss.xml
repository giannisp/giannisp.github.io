<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Ioannis Poulakas]]></title><description><![CDATA[Software / Web / iOS Developer]]></description><link>http://github.com/dylang/node-rss</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 30 Aug 2019 08:45:52 GMT</lastBuildDate><item><title><![CDATA[How to install Bash 5.0 on macOS]]></title><link>https://www.ioannispoulakas.com/2019/03/10/how-to-install-bash-5-on-macos/</link><guid isPermaLink="false">https://www.ioannispoulakas.com/2019/03/10/how-to-install-bash-5-on-macos/</guid><pubDate>Sun, 10 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Bash 5.0 has been released during the first week of January 2019.&lt;br&gt;
It builds upon Bash 4.4.x, fixes bugs, and introduces new features and improvements.&lt;br&gt;
You can find extended info at the official &lt;a href=&quot;http://lists.gnu.org/archive/html/bug-bash/2019-01/msg00063.html&quot;&gt;release notes&lt;/a&gt;.&lt;br&gt;
Although macOS is bundling Bash, it is using the older 3.x version most probably due to the Bash licensing changes. Since the Bash 4.x release, license has been changed from GPLv2 to GPLv3.&lt;/p&gt;
&lt;h3&gt;How to install Bash 5.0 (or latest bash) on macOS&lt;/h3&gt;
&lt;p&gt;As usual, &lt;code&gt;brew&lt;/code&gt; comes to the rescue, so installation is quite simple:&lt;br&gt;
&lt;code&gt;brew install bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There are two more steps to activate Bash 5.0.&lt;/p&gt;
&lt;p&gt;Add newly installed bash on /etc/shells:&lt;br&gt;
&lt;code&gt;sudo vi /etc/shells&lt;/code&gt;&lt;br&gt;
and add a new entry/line with the path:&lt;br&gt;
&lt;code&gt;/usr/local/bin/bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make Bash 5.0 default on macOS:&lt;br&gt;
&lt;code&gt;chsh -s /usr/local/bin/bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Check &lt;code&gt;bash --version&lt;/code&gt; to verify that the new version is successfully activated.&lt;/p&gt;
&lt;h3&gt;Bonus: install bash-completion&lt;/h3&gt;
&lt;p&gt;Various CLI apps support improved autocomplete via bash-completion scripts.&lt;/p&gt;
&lt;p&gt;Install bash-completion on macOS:&lt;br&gt;
&lt;code&gt;brew install bash-completion@2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Initialize bash-completion@2 on &lt;code&gt;~/.bash_profile&lt;/code&gt; with backwards compatibility:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export BASH_COMPLETION_COMPAT_DIR=&quot;/usr/local/etc/bash_completion.d&quot;
[[ -r &quot;/usr/local/etc/profile.d/bash_completion.sh&quot; ]] &amp;#x26;&amp;#x26; . &quot;/usr/local/etc/profile.d/bash_completion.sh&quot;
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title><![CDATA[How to manage your Python dependencies with Pipenv]]></title><link>https://www.ioannispoulakas.com/2018/01/28/manage-your-python-dependencies-with-pipenv/</link><guid isPermaLink="false">https://www.ioannispoulakas.com/2018/01/28/manage-your-python-dependencies-with-pipenv/</guid><pubDate>Sun, 28 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Python developers rejoice!&lt;br&gt;
&lt;a href=&quot;http://pipenv.readthedocs.io/en/latest/&quot;&gt;Pipenv&lt;/a&gt; is a dependency manager for Python projects.&lt;br&gt;
It works similarly to other popular dependency managers, like npm for NodeJS, or bundler for Ruby.&lt;br&gt;
Pipenv combines and streamlines the use of &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;virtualenv&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Getting started&lt;/h3&gt;
&lt;p&gt;Pipenv can be installed via pip:&lt;br&gt;
&lt;code&gt;pip install --user pipenv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If on macOS, I&apos;d recommend installing Pipenv via brew:&lt;br&gt;
&lt;code&gt;brew install pipenv&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Initialize a pipenv environment for any Python project&lt;/h3&gt;
&lt;p&gt;Initialize a Pipenv environment with Python 2.x:&lt;br&gt;
&lt;code&gt;pipenv --two&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Initialize a Pipenv environment with Python 3.x:&lt;br&gt;
&lt;code&gt;pipenv --three&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Notice that a new file will be created named &lt;code&gt;Pipfile&lt;/code&gt;.&lt;br&gt;
This file is similar to a &lt;code&gt;Gemfile&lt;/code&gt; or &lt;code&gt;package.json&lt;/code&gt; on Ruby and NodeJS respectively.
&lt;code&gt;Pipfile&lt;/code&gt; lists all top level dependencies grouped into &lt;code&gt;packages&lt;/code&gt; and &lt;code&gt;dev-packages&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Installing Python dependencies&lt;/h3&gt;
&lt;p&gt;Let&apos;s suppose that the popular library &lt;code&gt;requests&lt;/code&gt; is a requirement.&lt;/p&gt;
&lt;p&gt;Install the latest &lt;code&gt;requests&lt;/code&gt; version:&lt;br&gt;
&lt;code&gt;pipenv install requests&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or install a specific &lt;code&gt;requests&lt;/code&gt; version:&lt;br&gt;
&lt;code&gt;pipenv install requests==2.18.4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or install a package for dev purposes:&lt;br&gt;
&lt;code&gt;pipenv install nosetests --dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In all cases the &lt;code&gt;Pipfile&lt;/code&gt; will get updated, with either a &lt;code&gt;*&lt;/code&gt; version, or the specific requested version.&lt;br&gt;
In addition to the &lt;code&gt;Pipfile&lt;/code&gt;, a new file named &lt;code&gt;Pipfile.lock&lt;/code&gt; will be created.&lt;br&gt;
This file is similar to &lt;code&gt;Gemfile.lock&lt;/code&gt; or &lt;code&gt;package-lock.json&lt;/code&gt; on Ruby and NodeJS respectively.&lt;br&gt;
&lt;code&gt;Pipfile.lock&lt;/code&gt; lists all top level dependencies as well as any sub-dependencies.&lt;/p&gt;
&lt;p&gt;It&apos;s very important to commit and keep both &lt;code&gt;Pipfile&lt;/code&gt; and &lt;code&gt;Pipfile.lock&lt;/code&gt; files under version control, as these will be used to re-create the virtualenv by fellow contributors or via a deployment script etc.&lt;/p&gt;
&lt;h3&gt;Displaying Python dependencies&lt;/h3&gt;
&lt;p&gt;Apart from inspecting &lt;code&gt;Pipfile&lt;/code&gt; and &lt;code&gt;Pipfile.lock&lt;/code&gt; files, there is a handy Pipenv feature:&lt;br&gt;
&lt;code&gt;pipenv graph&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Running Python commands&lt;/h3&gt;
&lt;p&gt;The only downside of Pipenv, is that all Python commands need to be prefixed by &lt;code&gt;pipenv run&lt;/code&gt;, for example:&lt;br&gt;
&lt;code&gt;pipenv run python --version&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or&lt;br&gt;
&lt;code&gt;pipenv run python app.py&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Virtualenv shell shortcut&lt;/h3&gt;
&lt;p&gt;Pipenv has a nice little feature that spawns a bash shell within the virtualenv:&lt;br&gt;
&lt;code&gt;pipenv shell&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;python&lt;/code&gt; on the spawned bash shell, will start a Python shell within the virtualenv.&lt;br&gt;
If for example &lt;code&gt;requests&lt;/code&gt; package was installed, &lt;code&gt;import requests&lt;/code&gt; will just work.&lt;/p&gt;
&lt;h3&gt;Uninstalling Python dependencies&lt;/h3&gt;
&lt;p&gt;Uninstall a specific package:&lt;br&gt;
&lt;code&gt;pipenv uninstall requests&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or uninstall all packages:&lt;br&gt;
&lt;code&gt;pipenv uninstall --all&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Remove a Pipenv virtualenv&lt;/h3&gt;
&lt;p&gt;Clean up a virtualenv:&lt;br&gt;
&lt;code&gt;pipenv --rm&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Re-create a Pipenv virtualenv from Pipfile/Pipfile.lock&lt;/h3&gt;
&lt;p&gt;Create a Pipenv virtualenv and install all dependencies is as simple as:&lt;br&gt;
&lt;code&gt;pipenv install&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Is pyenv still relevant?&lt;/h3&gt;
&lt;p&gt;Pipenv is just a dependency manager, &lt;code&gt;pyenv&lt;/code&gt; is still relevant for managing different Python versions.&lt;br&gt;
Moreover Pipenv supports installing Python versions with &lt;code&gt;pyenv&lt;/code&gt; when needed.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Pipenv is a great tool, something that was really missing from the Python ecosystem. I am already using it in production, and I highly recommend it.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[My Visual Studio Code setup]]></title><link>https://www.ioannispoulakas.com/2017/10/22/my-vs-code-setup/</link><guid isPermaLink="false">https://www.ioannispoulakas.com/2017/10/22/my-vs-code-setup/</guid><pubDate>Sun, 22 Oct 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;A few months ago I have been blogging about &lt;a href=&quot;/2017/01/15/my-atom-setup/&quot;&gt;My Atom setup&lt;/a&gt;.&lt;br&gt;
I have always kept an eye on the progress of &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; though, having it installed, checking new features and extensions.&lt;/p&gt;
&lt;p&gt;Last month, after quite some dissapointments with Atom (like broken expand/collapse, split screen issues due to minimap), I decided to give VS Code a better chance, and code with it on my current projects.&lt;/p&gt;
&lt;p&gt;During the first couple of days I had to get used to doing some things differently (like search results on the sidebar), customize user preferences here and there, as well as find suitable extensions.&lt;/p&gt;
&lt;p&gt;Well, I got to admit that the result was totally worth the effort, as I have been feeling a lot more productive while coding on VS Code. And it&apos;s not just the blazing fast performance of the editor, there are little features everywhere that contribute to the overall great experience. I will try to list as many of them as I can think of.&lt;/p&gt;
&lt;p&gt;Here is my VS Code setup:&lt;/p&gt;
&lt;h2&gt;Theme&lt;/h2&gt;
&lt;p&gt;Color Theme: &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme&quot;&gt;One Dark Pro&lt;/a&gt;&lt;br&gt;
File Icon Theme: &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme&quot;&gt;Material Icon Theme&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Keyboard Shortcuts&lt;/h2&gt;
&lt;p&gt;I am using the official &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode.atom-keybindings&quot;&gt;Atom Keymap extension&lt;/a&gt;.&lt;br&gt;
VS Code team has done a great job providing extensions for both Atom and Sublime so that developers can get productive without having to learn yet another new set of shortcuts.&lt;/p&gt;
&lt;h2&gt;Packages&lt;/h2&gt;
&lt;h3&gt;The Essential&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig&quot;&gt;EditorConfig for VS Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Editorconfig helps developers to maintain consistent coding styles between different editors and platforms.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=sysoev.vscode-open-in-github&quot;&gt;Open in GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Provides commands to quickly open the current file on GitHub (History / Blame / File views).&lt;br&gt;
You may also want to check &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens&quot;&gt;Git Lens&lt;/a&gt; for in-editor views.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=PeterJausovec.vscode-docker&quot;&gt;Docker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Everything you need if you are working with Docker on your repos.&lt;/p&gt;
&lt;h3&gt;JavaScript&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint&quot;&gt;ESLint&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Integrates &lt;a href=&quot;https://eslint.org/&quot;&gt;ESLint&lt;/a&gt; into VS Code.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=dbaeumer.jshint&quot;&gt;jshint&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Integrates &lt;a href=&quot;http://jshint.com/&quot;&gt;JSHint&lt;/a&gt; into VS Code.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome&quot;&gt;Debugger for Chrome&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Debug your JS code in the Google Chrome browser, using breakpoints, watches and more.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=joelday.docthis&quot;&gt;Document This&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An extension that helps you autogenerate and write JS code documentation.&lt;/p&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=donjayamanne.python&quot;&gt;Python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An awesome Python extension providing linting (using Pylint, pep8 or other linters), intellisense, debugging support and more.&lt;/p&gt;
&lt;h3&gt;Ruby&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=rebornix.Ruby&quot;&gt;Ruby&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A Ruby extension that provides linting, debugging support and more.&lt;/p&gt;
&lt;h3&gt;CSS&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint&quot;&gt;StyleLint&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lint CSS files using &lt;a href=&quot;https://stylelint.io/&quot;&gt;stylelint&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Other&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Tyriar.sort-lines&quot;&gt;Sort lines&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A simple extension for sorting lines with multiple options.&lt;/p&gt;
&lt;h3&gt;Settings (User Preferences)&lt;/h3&gt;
&lt;p&gt;Initially I was thinking about listing my own settings, however since they are highly opinionated, I will advise you to go through preferences/settings and customize them according to your needs. They are intuitively separated into sections, there is documentation and a quick search.&lt;/p&gt;
&lt;h2&gt;Things I love on VS Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It&apos;s fast, amazingly fast! Scrolling through code, typing, intellisense, quick looking for files, expanding/collapsing code, file explorer actions. There isn&apos;t a single task that makes it feel slow (even though it&apos;s an Electron app, ie not native).&lt;/li&gt;
&lt;li&gt;Search is also fast, you just need to configure it to exclude git ignored files.&lt;/li&gt;
&lt;li&gt;It remembers everything while restarting the editor. Opened files, collapsed sections, even search excluded paths.&lt;/li&gt;
&lt;li&gt;As you have noticed, I didn&apos;t have to install a large number of extensions to get basic support for preferred languages.&lt;/li&gt;
&lt;li&gt;I don&apos;t need a mini-map, there&apos;s the default Enhanced Scrollbar that&apos;s marking code changes, search result occurrences, cursor position, errors. The Enhanced Scrollbar has an absolute height, so that means on long files you don&apos;t have to scroll down to figure out if there are marked search results.&lt;/li&gt;
&lt;li&gt;Markdown support is included. Markdown Preview (side-by-side or different tab). While on side-by-side preview mode, editor/preview panes are autoscrolling to reveal the selected content on either one of them!&lt;/li&gt;
&lt;li&gt;Enabling/disabling extensions per workspace.&lt;/li&gt;
&lt;li&gt;JavaScript jump to definition, smart intellisense based on actual code, path autocomplete on requires.&lt;/li&gt;
&lt;li&gt;Built-in JSON file lint support.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;VS Code has something for everyone&lt;/h2&gt;
&lt;p&gt;If you enjoy using an integrated terminal or source control within your editor, VS Code does that. I prefer to keep the best apps for each task, so for example I am working with &lt;a href=&quot;https://www.iterm2.com/&quot;&gt;iTerm2&lt;/a&gt; and &lt;a href=&quot;https://desktop.github.com/&quot;&gt;GitHub Desktop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Apart from the JS, Python, Ruby related extensions that I have listed, there is also support for Java, PHP and other programming languages.&lt;/p&gt;
&lt;p&gt;And similarly to Atom, you can find almost every extension you may need on the &lt;a href=&quot;https://marketplace.visualstudio.com/&quot;&gt;Marketplace&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Ruby on Rails, React, Redux, Webpack 2 boilerplate app]]></title><link>https://www.ioannispoulakas.com/2017/02/17/rails-react-redux-webpack-2-boilerplate-app/</link><guid isPermaLink="false">https://www.ioannispoulakas.com/2017/02/17/rails-react-redux-webpack-2-boilerplate-app/</guid><pubDate>Fri, 17 Feb 2017 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;GitHub repo: &lt;a href=&quot;https://github.com/giannisp/rails-react-boilerplate&quot;&gt;giannisp/rails-react-boilerplate&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a pure &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt; / &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; / &lt;a href=&quot;https://github.com/reactjs/redux&quot;&gt;Redux&lt;/a&gt; / &lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack 2&lt;/a&gt; boilerplate app that I have built and open-sourced. Highlights include using the newly released Webpack 2, as well as making the frontend part independent of the Asset Pipeline.&lt;/p&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ruby on Rails 5.x&lt;/li&gt;
&lt;li&gt;React 15.4.x&lt;/li&gt;
&lt;li&gt;Webpack 2.x&lt;/li&gt;
&lt;li&gt;Babel 6.x&lt;/li&gt;
&lt;li&gt;ESLint support&lt;/li&gt;
&lt;li&gt;SASS and StyleLint support&lt;/li&gt;
&lt;li&gt;Hashed filenames for production assets&lt;/li&gt;
&lt;li&gt;Separate app and vendor JS bundles&lt;/li&gt;
&lt;li&gt;Postgres compatibility&lt;/li&gt;
&lt;li&gt;Using Rails default gems and NPM packages only&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Exit Asset Pipeline, Enter Webpack&lt;/h2&gt;
&lt;p&gt;Why Webpack?&lt;/p&gt;
&lt;p&gt;Webpack is a module bundler. It can bundle all JS files for usage in the browser, but can also transform / bundle / package any resource or frontend asset.&lt;/p&gt;
&lt;p&gt;JavaScript community moves forward at a rapid pace, new frameworks and modules are being released every day. The &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM&lt;/a&gt; ecosystem is huge, and Webpack makes it available in the simplest way possible.&lt;/p&gt;
&lt;p&gt;Webpack can support every modern JS app, using ES6 or CommonJS modules, or both, create a single or multiple bundles, and in general can be customized to accomplish any application requirement.&lt;/p&gt;
&lt;p&gt;The frontend assets on this app are placed on a more accessible directory, at &lt;code&gt;/front/js&lt;/code&gt; and &lt;code&gt;front/css&lt;/code&gt;, rather than &lt;code&gt;app/assets/javascripts&lt;/code&gt; and &lt;code&gt;app/assets/stylesheets&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At any point, migration to a different backend (for example NodeJS) can be seamless since Webpack is running as a stand-alone bundler. There&apos;s absolutely no dependence to the Asset Pipeline or any other framework-specific module.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[My Atom setup]]></title><link>https://www.ioannispoulakas.com/2017/01/15/my-atom-setup/</link><guid isPermaLink="false">https://www.ioannispoulakas.com/2017/01/15/my-atom-setup/</guid><pubDate>Sun, 15 Jan 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I have switched to using &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; as my main code editor about 2 years ago and never looked back. Atom is open source, cross-platform - built on top of Electron, and can be highly customized.&lt;/p&gt;
&lt;p&gt;Here is my Atom setup:&lt;/p&gt;
&lt;h2&gt;Theme&lt;/h2&gt;
&lt;p&gt;UI Theme: One Dark&lt;br&gt;
Syntax Theme: One Dark&lt;/p&gt;
&lt;p&gt;This is the default theme on fresh Atom installations.&lt;br&gt;
In the past I have been using Atom Dark, and it was quite hard to get used to something new, however One Dark is a lot more pleasing to the eye.&lt;/p&gt;
&lt;h2&gt;Packages&lt;/h2&gt;
&lt;h3&gt;The Essential&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/editorconfig&quot;&gt;editorconfig&lt;/a&gt;&lt;br&gt;
&lt;code&gt;apm install editorconfig&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Editorconfig helps developers to maintain consistent coding styles between different editors and platforms. You can also generate a new .editorconfig file using the Command Palette.&lt;br&gt;
Hint: Disable Atom&apos;s default &quot;whitespace&quot; package to avoid possible conflicts.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/docblockr&quot;&gt;docblockr&lt;/a&gt;&lt;br&gt;
&lt;code&gt;apm install docblockr&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A powerful package that helps you writing code documentation.&lt;br&gt;
It can generate complete doc blocks, and makes it extremely fast to tab your way through filling-in the variable types and descriptions.&lt;br&gt;
Hint: make sure you check the Settings as it provides some neat customization options.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/highlight-selected&quot;&gt;highlight-selected&lt;/a&gt;&lt;br&gt;
&lt;code&gt;apm install highlight-selected&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Highlight the current selected word occurrences. Extremely useful for quickly checking variables, functions etc.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/file-icons&quot;&gt;file-icons&lt;/a&gt;&lt;br&gt;
&lt;code&gt;apm install file-icons&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Display file type specific icons everywhere (treeview, tabs, finder etc).&lt;br&gt;
Makes it a lot easier to quickly identifying opened files.&lt;/p&gt;
&lt;h3&gt;Linter and related plugins&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/linter&quot;&gt;linter&lt;/a&gt;&lt;br&gt;
&lt;code&gt;apm install linter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Linter is the base package that provides linting functionality for various file types via plugins. Should be the developer&apos;s first choice.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/linter-eslint&quot;&gt;linter-eslint&lt;/a&gt;&lt;br&gt;
&lt;code&gt;apm install linter-eslint&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Lint JavaScript using &lt;a href=&quot;http://eslint.org/&quot;&gt;eslint&lt;/a&gt;&lt;br&gt;
My favorite JS linter at the moment for NodeJS and React projects.&lt;br&gt;
Hint: Check &quot;Disable when no ESLint config file is found&quot; on Settings.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/linter-jshint&quot;&gt;linter-jshint&lt;/a&gt;&lt;br&gt;
&lt;code&gt;apm install linter-jshint&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Lint Javascript using &lt;a href=&quot;http://jshint.com/&quot;&gt;JSHint&lt;/a&gt;&lt;br&gt;
Still need it for some older projects that were setup with it.&lt;br&gt;
Hint: Check &quot;Disable when no jshintrc file in path&quot; on Settings.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/linter-jsonlint&quot;&gt;linter-jsonlint&lt;/a&gt;&lt;br&gt;
&lt;code&gt;apm install linter-jsonlint&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Lint JSON files using &lt;a href=&quot;https://github.com/zaach/jsonlint&quot;&gt;jsonlint&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/linter-php&quot;&gt;linter-php&lt;/a&gt;&lt;br&gt;
&lt;code&gt;apm install linter-php&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Lint PHP files using the php binary.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/linter-pylint&quot;&gt;linter-pylint&lt;/a&gt;&lt;br&gt;
&lt;code&gt;apm install linter-pylint&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Lint Python files using &lt;a href=&quot;https://www.pylint.org/&quot;&gt;pylint&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/linter-ruby&quot;&gt;linter-ruby&lt;/a&gt;&lt;br&gt;
&lt;code&gt;apm install linter-ruby&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Lint Ruby files using ruby binary.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/linter-xmllint&quot;&gt;linter-xmllint&lt;/a&gt;&lt;br&gt;
&lt;code&gt;apm install linter-xmllint&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Lint XML files using &lt;a href=&quot;http://xmlsoft.org/xmllint.html&quot;&gt;xmllint&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Minimap and related plugins&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/minimap&quot;&gt;minimap&lt;/a&gt;&lt;br&gt;
&lt;code&gt;apm install minimap&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Minimap provides a mini-preview of the full source code on every tab, and comes with a variety of useful plugins.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/minimap-cursorline&quot;&gt;minimap-cursorline&lt;/a&gt;&lt;br&gt;
&lt;code&gt;apm install minimap-cursorline&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Display the location of the cursor position.&lt;br&gt;
Hint: you can customize the color via your stylesheet.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/minimap-find-and-replace&quot;&gt;minimap-find-and-replace&lt;/a&gt;&lt;br&gt;
&lt;code&gt;apm install minimap-find-and-replace&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Display the search matches.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/minimap-git-diff&quot;&gt;minimap-git-diff&lt;/a&gt;&lt;br&gt;
&lt;code&gt;apm install minimap-git-diff&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Display git diffs, possibly one of the most useful plugins along with the next one.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/minimap-highlight-selected&quot;&gt;minimap-highlight-selected&lt;/a&gt;&lt;br&gt;
&lt;code&gt;apm install minimap-highlight-selected&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Display the current selected word occurrences.&lt;/p&gt;
&lt;h3&gt;For JavaScript development&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/js-hyperclick&quot;&gt;js-hyperclick&lt;/a&gt;&lt;br&gt;
&lt;code&gt;apm install hyperclick js-hyperclick&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It lets you jump to where variables are defined, or even required files.&lt;br&gt;
Hint: there are plugins for other languages based on the hyperclick base package.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/autocomplete-paths&quot;&gt;autocomplete-paths&lt;/a&gt;
&lt;code&gt;apm install autocomplete-paths&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Provides autocomplete functionality for relative paths and files. Not just for JS of course, but extremely useful on your imports/requires.&lt;/p&gt;
&lt;h3&gt;Tools&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/atom-beautify&quot;&gt;atom-beautify&lt;/a&gt;
&lt;code&gt;apm install atom-beautify&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It can beautify a great variety of files, however I mainly use it to prettify JSON files.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/sort-lines&quot;&gt;sort-lines&lt;/a&gt;&lt;br&gt;
&lt;code&gt;apm install sort-lines&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Sort selected lines, or get unique lines. Nice to have.&lt;/p&gt;
&lt;h3&gt;Other syntax support&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/atom-jade&quot;&gt;atom-jade&lt;/a&gt;&lt;br&gt;
&lt;code&gt;apm install atom-jade&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Adds &lt;a href=&quot;https://pugjs.org/api/getting-started.html&quot;&gt;Jade&lt;/a&gt; template language support.&lt;/p&gt;
&lt;h2&gt;Competition (VS Code)&lt;/h2&gt;
&lt;p&gt;You might be wondering why Atom and not &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt;. Especially when VS Code seems a lot faster (have you checked memory consumption though?).&lt;/p&gt;
&lt;p&gt;Well at least for my needs, the above packages make me more productive. Some of them are not available on VS Code at all yet, or their respective ones are just not that powerful.&lt;/p&gt;
&lt;p&gt;VS Code has some really cool features, like JS debugging with breakpoints that I am using sometimes. The integrated git and terminal support may also appeal a lot users, however I prefer to be using specific apps (like iTerm 2 and GitHub Desktop or SourceTree) that just do a lot more.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Powered by]]></title><link>https://www.ioannispoulakas.com/2017/01/13/powered-by/</link><guid isPermaLink="false">https://www.ioannispoulakas.com/2017/01/13/powered-by/</guid><pubDate>Fri, 13 Jan 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This post is dedicated to the technologies and code that are powering up the site.&lt;/p&gt;
&lt;p&gt;The site is hosted on &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.&lt;br&gt;
GitHub Pages is designed to host a static site directly from a GitHub repository.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll&lt;/a&gt;, a Ruby gem, is the library that does all the magic, generating the static content pages and blogs posts.&lt;br&gt;
The two-columns responsive theme that is currently running is a customized version of the excellent &lt;a href=&quot;https://github.com/poole/hyde&quot;&gt;Hyde&lt;/a&gt; theme.&lt;/p&gt;
&lt;p&gt;Here&apos;s how you can easily get started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start a new repository on GitHub (&lt;a href=&quot;https://help.github.com/articles/user-organization-and-project-pages/&quot;&gt;check how it should be named and branch details&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Create a new RVM or rbenv environment using Ruby &gt;=2.x.&lt;/li&gt;
&lt;li&gt;Init a new local git repository&lt;/li&gt;
&lt;li&gt;Start a new Gemfile including at least &lt;code&gt;github-pages&lt;/code&gt; (&lt;a href=&quot;https://github.com/giannisp/ioannispoulakas.com/blob/master/Gemfile&quot;&gt;example&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gem install bundler&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bundle install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you can select a preferred theme, like Hyde, and place it inside the repo.
GitHub Pages is currently using Jekyll 3.x, so you may need to customize the &lt;code&gt;_config.yml&lt;/code&gt; for compatibility (&lt;a href=&quot;https://github.com/giannisp/ioannispoulakas.com/blob/master/_config.yml&quot;&gt;example&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Running and viewing the site locally:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do &lt;code&gt;jekyll serve&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Visit &lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt; on your browser&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After customizing the look and feel, and adding some content, you should be ready to publish it!&lt;br&gt;
Simply push to the appropriate branch on the remote GitHub repository.&lt;/p&gt;
&lt;p&gt;You can also use a custom domain with GitHub Pages, which is really cool and &lt;a href=&quot;https://help.github.com/articles/using-a-custom-domain-with-github-pages/&quot;&gt;easy to accomplish&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The full source code of this site is available at &lt;a href=&quot;https://github.com/giannisp/ioannispoulakas.com&quot;&gt;giannisp/ioannispoulakas.com&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Hello World!]]></title><link>https://www.ioannispoulakas.com/2017/01/04/hello-world/</link><guid isPermaLink="false">https://www.ioannispoulakas.com/2017/01/04/hello-world/</guid><pubDate>Wed, 04 Jan 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hello World! I am &lt;a href=&quot;/about/&quot;&gt;Ioannis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post marks the beginning of my new personal site and blog!&lt;/p&gt;
&lt;p&gt;I will be posting about coding-related stuff and tools that are part of my daily routine and I enjoy working with. Also you can expect hints and tips that are coming from my remote-working life.&lt;/p&gt;
&lt;p&gt;You can follow the blog by subscribing on the &lt;a href=&quot;/rss.xml&quot;&gt;RSS feed&lt;/a&gt;.&lt;/p&gt;</content:encoded></item></channel></rss>